// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Define o provedor do banco de dados e a URL de conexão (do arquivo .env)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Define o gerador do Prisma Client
generator client {
  provider = "prisma-client-js"
}

// --- Enums ---

// Enum para o status das licitações, garantindo consistência dos dados.
enum StatusLicitacaoDetalhada {
  EM_ANDAMENTO
  VENCIDA
  ENCERRADA
  DESCLASSIFICADA
}

// --- Models (Tabelas) ---

// Tabela para armazenar os detalhes das licitações.
model LicitacaoDetalhada {
  id               String                   @id @default(cuid())
  city             String
  bidNumber        String
  realizationDate  String // Armazenado como texto "YYYY-MM-DD"
  placement        String
  status           StatusLicitacaoDetalhada
  companyName      String
  platformLink     String
  lastUpdated      DateTime                 @updatedAt
  progressForecast String?

  @@map("licitacoes_detalhadas") // Nome da tabela no banco de dados
}

// Tabela para os eventos do calendário.
model EventoCalendarioDetalhado {
  id          String   @id @default(cuid())
  start       String // Armazenado como texto "YYYY-MM-DD"
  title       String
  city        String
  bid_number  String
  time        String?
  location    String?
  description String?

  @@map("eventos_calendario")
}

// Tabela de Municípios. Cada município pode ter vários editais.
model Municipio {
  id      String   @id @default(cuid())
  nome    String   @unique
  editais Edital[]

  @@map("municipios")
}

// Tabela de Editais. Cada edital pertence a um município.
model Edital {
  id          String        @id @default(cuid())
  nome        String
  itens       EstoqueItem[]
  saidas      SaidaItem[]
  empenhos    Empenho[]

  municipio   Municipio @relation(fields: [municipioId], references: [id], onDelete: Cascade)
  municipioId String

  @@map("editais")
}

// Tabela para os itens de estoque de um edital.
model EstoqueItem {
  id            String  @id @default(cuid())
  descricao     String
  marca         String?
  unidade       String
  quantidade    Float // Quantidade inicial total
  valorUnitario Float
  valorTotal    Float

  edital   Edital   @relation(fields: [editalId], references: [id], onDelete: Cascade)
  editalId String

  @@map("estoque_itens")
}

// Tabela para registrar as saídas de itens do estoque.
model SaidaItem {
  id            String  @id @default(cuid())
  itemIndex     Int // Índice original do item no array do edital, para lógica do frontend.
  descricao     String
  marca         String?
  quantidade    Float
  valorUnitario Float
  valorTotal    Float
  data          String // Armazenado como texto "DD/MM/YYYY"
  notaFiscal    String

  edital   Edital @relation(fields: [editalId], references: [id], onDelete: Cascade)
  editalId String

  @@map("saidas_itens")
}

// Tabela para os empenhos de um edital.
model Empenho {
  id              String  @id @default(cuid())
  dataPedido      String // Armazenado como texto "YYYY-MM-DD"
  numeroPedido    String
  numeroProcesso  String
  dataNotaFiscal  String? // Armazenado como texto "YYYY-MM-DD"
  valorNotaFiscal Float?

  // Armazena informações do arquivo (incluindo o base64) em um campo JSON.
  empenhoPDF    Json?
  notaFiscalPDF Json?

  edital   Edital @relation(fields: [editalId], references: [id], onDelete: Cascade)
  editalId String

  @@map("empenhos")
}

// Tabela para as simulações de saída salvas.
model SimulacaoSalva {
  id        String          @id @default(cuid())
  data      DateTime        @default(now())
  municipio String
  edital    String
  itens     SimulacaoItem[]

  @@map("simulacoes_salvas")
}

// Itens que compõem uma simulação salva.
model SimulacaoItem {
  id            Int      @id @default(autoincrement())
  itemIndex     Int
  descricao     String
  marca         String?
  unidade       String
  quantidade    Float
  valorUnitario Float
  valorTotal    Float

  simulacao   SimulacaoSalva @relation(fields: [simulacaoId], references: [id], onDelete: Cascade)
  simulacaoId String

  @@map("simulacoes_itens")
}

// Tabela para os registros de entrega de EPIs.
model EPIEntrega {
  id          String @id @default(cuid())
  funcionario String
  item        String
  quantidade  Int
  dataEntrega String // Armazenado como texto "YYYY-MM-DD"

  @@map("epi_entregas")
}

// --- TABELA DE AUTENTICAÇÃO ---

// Tabela para armazenar os usuários do sistema.
model User {
  id           String   @id @default(cuid())
  username     String   @unique // O nome de usuário deve ser único
  passwordHash String   // A senha será armazenada como um hash seguro
  name         String   // Nome completo do usuário para exibição
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users") // Nome da tabela no banco de dados
}